/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

module dateparser2.splitter;

debug(dateparser2) import std.stdio;
import std.compiler;
import std.regex;
import std.traits;
import std.range;

// Compatibility patch for version 2.071 and earlier
// To be removed when support is dropped for 2.071
static if (version_major == 2 && version_minor < 72)
{
    /**
     * Split the given string on `pat`, but keep the matches in the final result.
     *
     * Params:
     *     r = the string to be split
     *     pat = the regex pattern
     * Returns:
     *     A forward range of strings
     */
    package auto splitterWithMatches(Range, RegEx)(Range r, RegEx pat) if (
        is(Unqual!(ElementEncodingType!Range) : dchar))
    {
        return SplitterResult!(Range, RegEx)(r, pat);
    }

    // Issue 15831: This should be a Voldemort type, but due to linker slowdown
    // it's a good idea to put this outside so we don't slowdown people's build
    // times
    package static struct SplitterResult(Range, alias RegEx = Regex)
    {
    private:
        Range _input;
        size_t _offset;
        bool onMatch = false;
        alias Rx = typeof(match(Range.init, RegEx.init));
        Rx _match;

        @trusted this(Range input, RegEx separator)
        {
            _input = input;
            if (_input.empty)
            {
                //there is nothing to match at all, make _offset > 0
                _offset = 1;
            }
            else
            {
                _match = Rx(_input, separator);
            }
        }

    public:
        auto ref opSlice()
        {
            return this.save;
        }

        ///Forward range primitives.
        @property Range front()
        {
            import std.algorithm : min;

            assert(!empty && _offset <= _match.pre.length && _match.pre.length <= _input.length);

            if (!onMatch)
                return _input[_offset .. min($, _match.pre.length)];
            else
                return _match.hit();
        }

        ///ditto
        @property bool empty()
        {
            return _offset >= _input.length;
        }

        ///ditto
        void popFront()
        {
            assert(!empty);
            if (_match.empty)
            {
                //No more separators, work is done here
                _offset = _input.length + 1;
            }
            else
            {
                if (!onMatch)
                {
                    //skip past the separator
                    _offset = _match.pre.length;
                    onMatch = true;
                }
                else
                {
                    onMatch = false;
                    _offset += _match.hit.length;
                    _match.popFront();
                }
            }
        }

        ///ditto
        @property auto save()
        {
            return this;
        }
    }
}
else
{
    import std.typecons;

    package auto splitterWithMatches(Range, RegEx)(Range r, RegEx pat)
    {
        return splitter!(Yes.keepSeparators)(r, pat);
    }
}

unittest
{
    import std.algorithm.comparison : equal;

    assert("2003.04.05"
        .splitterWithMatches(regex(`([\.,])`, "g"))
        .equal(["2003", ".", "04", ".", "05"]));

    assert("10:00a.m."
        .splitterWithMatches(regex(`([\.,])`, "g"))
        .equal(["10:00a", ".", "m", "."]));
}
